---
- name: Playbook to perform a security dist-upgrade (reboot if required) (Debuntu)
  hosts: linux
  gather_facts: yes
  become: yes
  
  tasks:
    - name: Print host distro details
      ansible.builtin.debug:
        msg: 
          - "Host: {{ inventory_hostname }} with Distro: {{ ansible_distribution }} ({{ ansible_distribution_file_variety }})"
          - "OS.Version: {{ ansible_distribution_version }} ({{ ansible_lsb.codename | default('default_value') | lower }})"
          - "Architecture: {{ ansible_architecture }}"
          - "Kernel: {{ ansible_kernel }}, Version: {{ ansible_kernel_version }}"
          - "Memory [GB]: Free: {{ ansible_memfree_mb/1024 }}, Total: {{ ansible_memtotal_mb/1024 }}"
          - "Host.Name: {{ ansible_hostname }},  Host.Ipv4: {{ ansible_all_ipv4_addresses }}"
             
    - name: Get content of sources.list
      ansible.builtin.shell:
        cat '/etc/apt/sources.list'
      register: output
      when: ansible_os_family == 'Debian'
      
    - name: show content of sources.list
      debug: var=output.stdout_lines
      when: ansible_os_family == 'Debian'

    - name: Remove sources.list file
      file:
        path: "/etc/apt/sources.list"
        state: absent
      when: ansible_os_family == 'Debian'  
    
    # https://wiki.ubuntuusers.de/sources.list/
    - name: Add security relevant Ubuntu (i.e. 20.04 focal) repositories into sources.list
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list
        line: "{{ item }}"
        create: yes
        owner: root
        group: root
        mode: '0644'
      loop:
        - "deb http://archive.ubuntu.com/ubuntu/   {{ ansible_lsb.codename|lower }}          main restricted universe multiverse"
        - "deb http://security.ubuntu.com/ubuntu/  {{ ansible_lsb.codename|lower }}-security main restricted universe multiverse"  
        - "deb http://archive.ubuntu.com/ubuntu/   {{ ansible_lsb.codename|lower }}-updates  main restricted universe multiverse"
      when: ansible_distribution == 'Ubuntu'
          
    # https://www.debian.org/security/      
    - name: Add security relevant Debian (i.e. 11 bullseye) repositories into sources.list
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list
        line: "{{ item }}"
        create: yes
        owner: root
        group: root
        mode: '0644'
      loop:
        - "deb http://deb.debian.org/debian                {{ ansible_lsb.codename|lower }}          main"
        - "deb http://security.debian.org/debian-security  {{ ansible_lsb.codename|lower }}-security main"
        - "deb http://deb.debian.org/debian                {{ ansible_lsb.codename|lower }}-updates  main"
      when: ansible_distribution == 'Debian'
    
    - name: Update repository index (Debuntu)
      ansible.builtin.apt:
       update_cache: yes          # apt-get update -y
       force_apt_get: yes         # use apt instead of aptitude
      when: ansible_os_family == 'Debian'    
    
    - name: Get list of upgradable packages
      ansible.builtin.command: 
        apt list --upgradable
      register: upgradables
      when: ansible_os_family == 'Debian'

    - name: Print upgradable packages
      debug: var=upgradables.stdout_lines
      when: ansible_os_family == 'Debian'
    
    - name: Perform an apt-get dist-upgrade (Debuntu boxes)
      ansible.builtin.apt:
        upgrade: dist              # apt-get dist-upgrade -y
        force_apt_get: yes
      register: upgradeoutput
      when: ansible_os_family == 'Debian'
    
    - name: Print the upgrade output
      debug: 
        var: upgradeoutput.stdout_lines
        verbosity: 0
      when: ansible_os_family == 'Debian'

    
    - name: Check if a reboot is required (Debuntu boxes)
      ansible.builtin.stat:
        path: /var/run/reboot-required
        get_checksum: no
      register: reboot_required_file
      when: ansible_os_family == 'Debian'

    - name: Reboot the server (if required)
      ansible.builtin.reboot:
        msg: "Reboot initiated by Ansible after OS upgrade" 
        connect_timeout: 5 
        reboot_timeout: 300 
        pre_reboot_delay: 0 
        post_reboot_delay: 30 
        test_command: uptime
      when: reboot_required_file.stat is defined and reboot_required_file.stat.exists == true

    - name: Remove useless apt packages from cache (Debuntu boxes)
      ansible.builtin.apt:
        autoclean: yes
      when: ansible_os_family == 'Debian'

    - name: Remove obsolete apt dependencies (Debuntu boxes)
      ansible.builtin.apt:
        autoremove: yes                     # apt-get autoremove
      when: ansible_os_family == 'Debian'
...